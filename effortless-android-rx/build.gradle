buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

version = '1.0.3'

publishing {
    publications {
        Production(MavenPublication) {
            artifact("$buildDir/outputs/aar/effortless-android-rx-release.aar")
            artifact(sourcesJar)
            groupId 'io.milkcan'
            artifactId 'effortless-android-rx'
            version '1.0.3'
        }
    }
}

bintray {
    user = getLocalProperty("bintray.user")
    key = getLocalProperty("bintray.apikey")
    pkg {
        repo = 'maven'
        name = 'effortless-android-rx'
        licenses = ['Apache-2.0']
        desc = 'A collection of Kotlin extension functions for Android development with RxJava 2.'
        websiteUrl = "https://milkcan.io/"
        vcsUrl = 'https://github.com/bachhuberdesign/effortless-android.git'
    }
    publications = ['Production']
}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

configurations {
    javadocDeps
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Testing
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'

    // Kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    // Rx
    compile 'io.reactivex.rxjava2:rxjava:2.1.2'
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
}

def getLocalProperty(String propertyName) {
    def propsFile = rootProject.file('local.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        return props[propertyName]
    } else {
        return ""
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}